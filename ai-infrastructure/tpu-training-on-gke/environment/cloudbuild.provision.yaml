# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - id: log parameters 
    name: gcr.io/cloud-builders/gke-deploy
    entrypoint: /bin/bash 
    args:
      - -c
      - |
          echo BUILD SETTINGS:
          cat 1-base-infrastructure/terraform.tfvars 
          echo _JOBSET_API_VERSION=$_JOBSET_API_VERSION
          echo _KUEUE_API_VERSION=$_KUEUE_API_VERSION

  - id: tf init
    name: hashicorp/terraform
    dir: 1-base-infrastructure
    args: 
    - init 

  - id: tf plan
    name: hashicorp/terraform
    dir: 1-base-infrastructure 
    args: 
    - plan 
    - -out=tfplan

  - id: tf apply
    name: hashicorp/terraform
    dir: 1-base-infrastructure 
    args: 
    - apply
    - -auto-approve
    - tfplan 

  - id: tf output
    name: hashicorp/terraform
    entrypoint: sh
    dir: 1-base-infrastructure  
    args:
    - -c
    - |
      touch params.env
      echo "CLUSTER_NAME=$(terraform output cluster_name)" >> params.env 
      echo "CLUSTER_REGION=$(terraform output cluster_region)" >> params.env
      echo "KSA_NAME=$(terraform output wid_ksa_name)" >> params.env
      echo "KSA_NAMESPACE=$(terraform output wid_ksa_namespace)" >> params.env
      echo "GSA_EMAIL=$(terraform output wid_gsa_email)" >> params.env

  - id: 'Deploy JobSet'
    name: gcr.io/cloud-builders/gke-deploy
    entrypoint: /bin/bash
    dir: 1-base-infrastructure  
    args:
      - -c
      - |
        set -o  allexport; source params.env; set +o allexport
        echo $$CLUSTER_NAME
        echo $$CLUSTER_REGION
        gcloud container clusters get-credentials $$CLUSTER_NAME --region $$CLUSTER_REGION
        kubectl apply --server-side -f "https://github.com/kubernetes-sigs/jobset/releases/download/$_JOBSET_API_VERSION/manifests.yaml" 
#
  - id: 'Deploy Kueue'
    name: gcr.io/cloud-builders/gke-deploy
    entrypoint: /bin/bash
    args:
      - -c
      - |
        kubectl apply --server-side -f "https://github.com/kubernetes-sigs/kueue/releases/download/$_KUEUE_API_VERSION/manifests.yaml"

  - id: 'Config Kueue'
    name: gcr.io/cloud-builders/gke-deploy
    entrypoint: /bin/bash
    dir: 2-kubernetes-config 
    args:
      - -c
      - |
        ### Install new version of Kustomize
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash

        set -o  allexport; source ../1-base-infrastructure/params.env; set +o allexport
        cp ../1-base-infrastructure/templates/cluster_queue.yaml . 
        ./kustomize edit set namespace $$KSA_NAMESPACE 
        ./kustomize edit remove configmap wid-config
        ./kustomize edit add configmap wid-config --from-literal=ksa_name=$$KSA_NAME --from-literal=gsa_email=$$GSA_EMAIL --from-literal=cluster_queue=$_CLUSTER_QUEUE_NAME

        max_attempts=5
        attempt_num=1
        success=false

        while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
          echo Sleep for a few seconds to avoid timeouts from Kueue
          sleep 45 
          echo Attempting deployment of Kueue CRDs
          kubectl apply -k .
          if [ $? -eq 0 ]; then
            success=true
            echo Deployment of CRDs successful
          else
            echo "Deployment of CRDs failed"
            attempt_num=$(( attempt_num + 1 ))
          fi
        done

substitutions:
  _JOBSET_API_VERSION: v0.3.0
  _KUEUE_API_VERSION: v0.5.1
  _CLUSTER_QUEUE_NAME: cluster-queue