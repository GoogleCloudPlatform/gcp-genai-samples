# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  - id: log parameters 
    name: gcr.io/cloud-builders/gcloud
    entrypoint: /bin/bash 
    args:
      - -c
      - |
          echo BUILD SETTINGS:
          cat 1-base-infrastructure/terraform.tfvars 
          echo _JOBSET_API_VERSION=$_JOBSET_API_VERSION
          echo _KUEUE_API_VERSION=$_KUEUE_API_VERSION

  - id: tf init
    name: hashicorp/terraform
    dir: 1-base-infrastructure
    args: 
    - init 

  - id: tf plan
    name: hashicorp/terraform
    dir: 1-base-infrastructure 
    args: 
    - plan 
    - -out=tfplan

  - id: tf apply
    name: hashicorp/terraform
    dir: 1-base-infrastructure 
    args: 
    - apply
    - -auto-approve
    - tfplan 

  - id: tf output
    name: hashicorp/terraform
    dir: 1-base-infrastructure  
    entrypoint: sh
    args:
    - -c
    - |
      touch params.env
      echo "CLUSTER_NAME=$(terraform output cluster_name)" >> params.env 
      echo "CLUSTER_REGION=$(terraform output cluster_region)" >> params.env
      cat params.env 


  - id: 'Deploy JobSet'
    name: gcr.io/cloud-builders/gcloud
#    name: gcr.io/google.com/cloudsdktool/cloud-sdk 
    dir: 1-base-infrastructure 
    entrypoint: /bin/bash
    args:
      - -c
      - |
        set -o  allexport; source params.env; set +o allexport
        echo $$CLUSTER_NAME
        echo $$CLUSTER_REGION
#        CLUSTER_NAME=
#        gcloud container clusters get-credentials $_CLUSTER_NAME --region $_REGION
#        kubectl apply --server-side -f "https://github.com/kubernetes-sigs/jobset/releases/download/$_JOBSET_API_VERSION/manifests.yaml" 
#
#  - id: 'Deploy Kueue'
#    name: gcr.io/google.com/cloudsdktool/cloud-sdk 
#    entrypoint: /bin/bash
#    args:
#      - -c
#      - |
#        kubectl apply -f "https://github.com/kubernetes-sigs/kueue/releases/download/$_KUEUE_API_VERSION/manifests.yaml"
#
#  - id: 'Config Kueue'
#    name: gcr.io/google.com/cloudsdktool/cloud-sdk 
#    entrypoint: /bin/bash
#    args:
#      - -c
#      - |
#        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
#        mv kustomize /usr/local/bin
#        cd kueue
#        kustomize edit set namespace $_NAMESPACE
#        kustomize edit remove configmap tpu-config
#        kustomize edit add configmap tpu-config --from-literal=NAME=$_TPU_TYPE --from-literal=NUM_OF_CHIPS=$_NUM_OF_CHIPS
#        
#        max_attempts=5
#        attempt_num=1
#        success=false
#
#        while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
#          echo Sleep for a few seconds to avoid timeouts from Kueue
#          sleep 10
#          echo Attempting deployment of Kueue CRDs
#          kubectl apply -k .
#          if [ $? -eq 0 ]; then
#            success=true
#            echo Deployment of CRDs successful
#          else
#            echo "Deployment of CRDs faile"
#            attempt_num=$(( attempt_num + 1 ))
#          fi
#        done
#
#
#
#
# 